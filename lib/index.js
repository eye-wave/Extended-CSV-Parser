function t(t,e=[]){t=t.replace(/#.*\n?/g,"").trim();const[r]=t.match(/.*/)||[];if(!r)throw new Error("File empty");const s=function(t){return t.split(",").map((t=>{const[n,e="string"]=t.split(":");return{type:e,tokens:n?.split(".")||[]}}))}(r);return t.split("\n").slice(1).map((t=>function(t,e,r=[]){const s={};return t.split(",").forEach(((t,o)=>{const i=e.at(o);if(!i)return;const l=i.tokens.slice(0,-1),a=i.tokens.at(-1),c=n(t,i.type,r);if(null===c)return;if(!a)return;let u=s;l.forEach((t=>{t in u||(u[t]={}),u=u[t]})),u[a]=c})),s}(t,s,e)))}function n(t,e,r=[]){if(e.endsWith("[]")){const r=e.slice(0,-2);return t.split(";").map((t=>n(t,r))).filter((t=>!("string"==typeof t&&t.length<1)&&("number"==typeof t&&0===t||("boolean"==typeof t&&!1===t||!!t))))}const s=t.startsWith("0x")?parseInt(t):parseFloat(t);switch(e){case"float":case"number":return isNaN(s)?null:s;case"int":return isNaN(s)?null:Math.floor(s);case"bool":case"boolean":{const n=t.toLowerCase();return"true"===n||"false"!==n&&null}}for(const n of r)if(e===n.name)return n.parse(t);return t}export{t as parseCSV};
